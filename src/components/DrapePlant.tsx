/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 DrapePlant.glb -T -t
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useThree } from "@react-three/fiber";
import { animated, useSpring } from "@react-spring/three";
import { useGesture } from "@use-gesture/react";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder001: THREE.Mesh;
    Cylinder001_1: THREE.Mesh;
    Cylinder001_2: THREE.Mesh;
    Cylinder001_3: THREE.Mesh;
    Cylinder001_4: THREE.Mesh;
    stone002: THREE.Mesh;
  };
  materials: {
    ["pot.002"]: THREE.MeshStandardMaterial;
    dirt: THREE.MeshStandardMaterial;
    ["metal.chrome"]: THREE.MeshStandardMaterial;
    ["plant.wood"]: THREE.MeshStandardMaterial;
    ["plant.leaf"]: THREE.MeshStandardMaterial;
    stones: THREE.MeshStandardMaterial;
  };
};

export function DrapePlant(props: any) {
  const { nodes, materials } = useGLTF(
    "/DrapePlant-transformed.glb"
  ) as GLTFResult;

  const { staticScale, hoverScale, initialPosition } = props;

  const { size, viewport } = useThree();

  const aspect = size.width / viewport.width;

  const [spring, set] = useSpring(() => ({
    scale: staticScale,
    position: initialPosition,
    rotation: [0, 0, 0],
    config: { friction: 10 },
  }));

  const bind = useGesture({
    onDrag: ({ offset: [x, y] }) =>
      set({
        position: [
          initialPosition[0] + x / aspect,
          initialPosition[1] - y / aspect,
          initialPosition[2],
        ],
      }),
    onHover: ({ hovering }) =>
      set({ scale: hovering ? hoverScale : staticScale }),
  });

  return (
    <animated.group {...props} {...spring} {...bind()} dispose={null}>
      <mesh
        geometry={nodes.stone002.geometry}
        material={materials.stones}
        position={[0, -0.57, -0.01]}
        rotation={[-2.58, -0.2, -2.45]}
        scale={0.44}
      />
      <mesh
        geometry={nodes.Cylinder001.geometry}
        material={materials["pot.002"]}
      />
      <mesh geometry={nodes.Cylinder001_1.geometry} material={materials.dirt} />
      <mesh
        geometry={nodes.Cylinder001_2.geometry}
        material={materials["metal.chrome"]}
      />
      <mesh
        geometry={nodes.Cylinder001_3.geometry}
        material={materials["plant.wood"]}
      />
      <mesh
        geometry={nodes.Cylinder001_4.geometry}
        material={materials["plant.leaf"]}
      />
    </animated.group>
  );
}

useGLTF.preload("/DrapePlant-transformed.glb");
