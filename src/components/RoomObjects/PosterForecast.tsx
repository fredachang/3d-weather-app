/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 GluedPosterv2.gltf --transform --types
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Object3DNode, useThree } from "@react-three/fiber";
import { animated, useSpring } from "@react-spring/three";
import { useGesture } from "@use-gesture/react";
import { useEffect } from "react";
import { useLocalStorage } from "react-use";
import { FontLoader } from "three/examples/jsm/loaders/FontLoader";
import { extend } from "@react-three/fiber";
import { TextGeometry } from "three/examples/jsm/geometries/TextGeometry";
import jgs7 from "../../assets/jgs7_Regular.json";
import { ForecastByDate, TempEveryThreeHours } from "../../Api";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
  };
  materials: {
    ["Glued Poster  (baked)"]: THREE.MeshStandardMaterial;
  };
};

extend({ TextGeometry });

declare module "@react-three/fiber" {
  interface ThreeElements {
    textGeometry: Object3DNode<TextGeometry, typeof TextGeometry>;
  }
}

const fontColour = new THREE.Color("rgb(0, 0, 0)");

export function PosterForecast(props: any) {
  const { nodes, materials } = useGLTF(
    "/GluedPosterv2-transformed.glb"
  ) as GLTFResult;

  const { staticScale, hoverScale, initialPosition, forecastWeather } = props;

  const [position1, setPosition1] = useLocalStorage<number[]>(
    "ForecastPosterPos1",
    initialPosition
  );

  const [position2, setPosition2] =
    useLocalStorage<number[]>("ForecastPosterPos2");

  useEffect(() => {
    const position1FromStorage = JSON.parse(
      localStorage.getItem("ForecastPosterPos1") ?? ""
    );
    setPosition2(
      position1FromStorage === "" ? initialPosition : position1FromStorage
    );
  }, []);

  const { size, viewport } = useThree();

  const aspect = size.width / viewport.width;

  const [spring, set] = useSpring(() => ({
    scale: staticScale,
    position: position1,
    rotation: [0, 0, 0],
    config: { friction: 10 },
  }));

  const bind = useGesture({
    onDrag: ({ offset: [x, y] }) => {
      const defaultPosition = position2 ? position2 : [0, 0, 0];
      const newPosition = [
        defaultPosition[0] + x / aspect,
        defaultPosition[1] - y / aspect,
        defaultPosition[2],
      ];

      set({ position: newPosition });
      setPosition1(newPosition);
    },
    onHover: ({ hovering }) =>
      set({ scale: hovering ? hoverScale : staticScale }),
  });

  const font = new FontLoader().parse(jgs7);

  const calculateAverageTemp = (data: TempEveryThreeHours[]) => {
    const sumTemp = data.reduce((acc, curr) => acc + curr.temp, 0);
    const averageTemp = sumTemp / data.length;
    const roundedAverageTemp = averageTemp.toFixed(2);
    return roundedAverageTemp;
  };

  const dailyForecast = forecastWeather.forecast.map((day: ForecastByDate) => ({
    date: day.date,
    temp: calculateAverageTemp(day.weather),
  }));

  return (
    <animated.group
      {...props}
      {...spring}
      {...bind()}
      dispose={null}
      rotation={[0, 0, -0.02]}
    >
      <mesh position={[-0.55, 0.55, 0.2]}>
        <textGeometry
          args={["Forecast Report", { font, size: 0.07, height: 0 }]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.55, 0.25, 0.2]}>
        <textGeometry
          args={[dailyForecast[1].date || "", { font, size: 0.05, height: 0 }]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.15, 0.25, 0.2]}>
        <textGeometry
          args={[
            `${dailyForecast[1].temp}` || "",
            { font, size: 0.05, height: 0 },
          ]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.55, 0.15, 0.2]}>
        <textGeometry
          args={[dailyForecast[2].date || "", { font, size: 0.05, height: 0 }]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.15, 0.15, 0.2]}>
        <textGeometry
          args={[
            `${dailyForecast[2].temp}` || "",
            { font, size: 0.05, height: 0 },
          ]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.55, 0.05, 0.2]}>
        <textGeometry
          args={[dailyForecast[3].date || "", { font, size: 0.05, height: 0 }]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.15, 0.05, 0.2]}>
        <textGeometry
          args={[
            `${dailyForecast[3].temp}` || "",
            { font, size: 0.05, height: 0 },
          ]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.55, -0.05, 0.2]}>
        <textGeometry
          args={[dailyForecast[4].date || "", { font, size: 0.05, height: 0 }]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.15, -0.05, 0.2]}>
        <textGeometry
          args={[
            `${dailyForecast[4].temp}` || "",
            { font, size: 0.05, height: 0 },
          ]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.55, -0.15, 0.2]}>
        <textGeometry
          args={[dailyForecast[5].date || "", { font, size: 0.05, height: 0 }]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh position={[-0.15, -0.15, 0.2]}>
        <textGeometry
          args={[
            `${dailyForecast[5].temp}` || "",
            { font, size: 0.05, height: 0 },
          ]}
        />
        <meshBasicMaterial attach="material" color={fontColour} />
      </mesh>

      <mesh
        geometry={nodes.Plane.geometry}
        material={materials["Glued Poster  (baked)"]}
      />
    </animated.group>
  );
}

useGLTF.preload("/GluedPosterv2-transformed.glb");
