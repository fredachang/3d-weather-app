/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 calathea.gltf -T -types
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useThree } from "@react-three/fiber";
import { animated, useSpring } from "@react-spring/three";
import { useGesture } from "@use-gesture/react";
import { useLocalStorage } from "react-use";
import { useEffect } from "react";

type GLTFResult = GLTF & {
  nodes: {
    calathea_Leaves: THREE.Mesh;
    Ceramic_pot: THREE.Mesh;
    Plastic_pot: THREE.Mesh;
    Soil: THREE.Mesh;
  };
  materials: {
    calathea_orbifolia_01: THREE.MeshStandardMaterial;
    ["Ceramic Glazed"]: THREE.MeshStandardMaterial;
    Plastic: THREE.MeshStandardMaterial;
    ["Procedural Dirt"]: THREE.MeshStandardMaterial;
  };
};

export function Calathea(props: any) {
  const { nodes, materials } = useGLTF(
    "/calathea-transformed.glb"
  ) as GLTFResult;

  const { staticScale, hoverScale, initialPosition } = props;

  const [position1, setPosition1] = useLocalStorage<number[]>(
    "calatheaPos1",
    initialPosition
  );

  const [position2, setPosition2] = useLocalStorage<number[]>("calatheaPos2");

  useEffect(() => {
    const position1FromStorage = JSON.parse(
      localStorage.getItem("calatheaPos1") ?? ""
    );
    setPosition2(
      position1FromStorage === "" ? initialPosition : position1FromStorage
    );
  }, []);

  const { size, viewport } = useThree();

  const aspect = size.width / viewport.width;

  const [spring, set] = useSpring(() => ({
    scale: staticScale,
    position: position1,
    rotation: [0, 0, 0],
    config: { friction: 10 },
  }));

  const bind = useGesture({
    onDrag: ({ offset: [x, y] }) => {
      const defaultPosition = position2 ? position2 : [0, 0, 0];
      const newPosition = [
        defaultPosition[0] + x / aspect,
        defaultPosition[1] - y / aspect,
        defaultPosition[2],
      ];

      set({ position: newPosition });
      setPosition1(newPosition);
    },
    onHover: ({ hovering }) =>
      set({ scale: hovering ? hoverScale : staticScale }),
  });

  return (
    <animated.group {...props} {...spring} {...bind()} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.calathea_Leaves.geometry}
        material={materials.calathea_orbifolia_01}
        position={[-0.01, 0.19, 0]}
        rotation={[0, -0.4, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Ceramic_pot.geometry}
        material={materials["Ceramic Glazed"]}
        position={[0, 0.11, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plastic_pot.geometry}
        material={materials.Plastic}
        position={[0, 0.19, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Soil.geometry}
        material={materials["Procedural Dirt"]}
        position={[0, 0.19, 0]}
      />
    </animated.group>
  );
}

useGLTF.preload("/calathea-transformed.glb");
