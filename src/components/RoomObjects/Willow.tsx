/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Willow.gltf --transform -types
*/

import * as THREE from "three";
import { useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useGesture } from "@use-gesture/react";
import { animated, useSpring } from "@react-spring/three";
import { useThree } from "@react-three/fiber";
import { useLocalStorage } from "react-use";

type GLTFResult = GLTF & {
  nodes: {
    leaves: THREE.Mesh;
    leaves_1: THREE.Mesh;
    Circle: THREE.Mesh;
    Circle_1: THREE.Mesh;
    pot: THREE.Mesh;
  };
  materials: {
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Blue Plastic"]: THREE.MeshStandardMaterial;
    ["Wood plate"]: THREE.MeshStandardMaterial;
    ["Wood pot"]: THREE.MeshStandardMaterial;
  };
};

export function Willow(props: any) {
  const { nodes, materials } = useGLTF("/Willow-transformed.glb") as GLTFResult;

  const { staticScale, hoverScale, initialPosition } = props;

  const [position1, setPosition1] = useLocalStorage<number[]>(
    "willowPos1",
    initialPosition
  );

  const [position2, setPosition2] = useLocalStorage<number[]>("willowPos2");

  useEffect(() => {
    const position1FromStorage = JSON.parse(
      localStorage.getItem("willowPos1") ?? ""
    );
    setPosition2(
      position1FromStorage === "" ? initialPosition : position1FromStorage
    );
  }, []);

  const { size, viewport } = useThree();

  const aspect = size.width / viewport.width;

  const [spring, set] = useSpring(() => ({
    scale: staticScale,
    position: position1,
    rotation: [0, 0, 0],
    config: { friction: 13 },
  }));

  const bind = useGesture({
    onDrag: ({ offset: [x, y] }) => {
      const defaultPosition = position2 ? position2 : [0, 0, 0];
      const newPosition = [
        defaultPosition[0] + x / aspect,
        defaultPosition[1] - y / aspect,
        defaultPosition[2],
      ];

      set({ position: newPosition });
      setPosition1(newPosition);
    },
    onHover: ({ hovering }) =>
      set({ scale: hovering ? hoverScale : staticScale }),
  });

  return (
    <animated.group
      {...props}
      {...spring}
      {...bind()}
      dispose={null}
      position={position1}
    >
      <group scale={0.09}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.leaves.geometry}
          material={materials["Material.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.leaves_1.geometry}
          material={materials["Material.004"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pot.geometry}
        material={materials["Wood pot"]}
        position={[0, 0.13, 0]}
        scale={0.09}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Circle.geometry}
        material={materials["Blue Plastic"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Circle_1.geometry}
        material={materials["Wood plate"]}
      />
    </animated.group>
  );
}

useGLTF.preload("/Willow-transformed.glb");
